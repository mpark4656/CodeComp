/* The following code was generated by JFlex 1.6.1 */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 1998-2009  Gerwin Klein <lsf@jflex.de>                    *
 * All rights reserved.                                                    *
 *                                                                         *
 * License: BSD                                                            *
 * Modified by mpark                                                       *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


package edu.odu.cs.cs350.red2.LexicalTools;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/michael/Documents/java/workspace/Red2/src/main/jflex/cplusplus.jflex</tt>
 */
public class CppScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\3\1\2\1\114\1\115\1\1\16\10\4\0\1\3\1\77"+
    "\1\25\1\6\1\7\1\107\1\103\1\26\1\64\1\65\1\5\1\105"+
    "\1\73\1\24\1\22\1\4\1\11\1\17\1\16\1\57\1\110\1\20"+
    "\1\56\1\111\1\112\1\12\1\102\1\72\1\76\1\74\1\75\1\101"+
    "\1\0\3\15\1\113\1\23\1\21\5\7\1\13\13\7\1\14\2\7"+
    "\1\70\1\27\1\71\1\106\1\41\1\0\1\30\1\52\1\46\1\40"+
    "\1\42\1\37\1\33\1\55\1\32\1\7\1\54\1\31\1\44\1\34"+
    "\1\36\1\50\1\43\1\53\1\35\1\45\1\51\1\62\1\61\1\47"+
    "\1\60\1\63\1\66\1\104\1\67\1\100\6\10\1\116\32\10\2\0"+
    "\4\7\4\0\1\7\2\0\1\10\7\0\1\7\4\0\1\7\5\0"+
    "\27\7\1\0\37\7\1\0\u01ca\7\4\0\14\7\16\0\5\7\7\0"+
    "\1\7\1\0\1\7\21\0\160\10\5\7\1\0\2\7\2\0\4\7"+
    "\10\0\1\7\1\0\3\7\1\0\1\7\1\0\24\7\1\0\123\7"+
    "\1\0\213\7\1\0\5\10\2\0\236\7\11\0\46\7\2\0\1\7"+
    "\7\0\47\7\7\0\1\7\1\0\55\10\1\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\1\10\10\0\33\7\5\0\3\7\15\0\5\10"+
    "\6\0\1\7\4\0\13\10\5\0\53\7\37\10\4\0\2\7\1\10"+
    "\143\7\1\0\1\7\10\10\1\0\6\10\2\7\2\10\1\0\4\10"+
    "\2\7\12\10\3\7\2\0\1\7\17\0\1\10\1\7\1\10\36\7"+
    "\33\10\2\0\131\7\13\10\1\7\16\0\12\10\41\7\11\10\2\7"+
    "\4\0\1\7\5\0\26\7\4\10\1\7\11\10\1\7\3\10\1\7"+
    "\5\10\22\0\31\7\3\10\104\0\1\7\1\0\13\7\67\0\33\10"+
    "\1\0\4\10\66\7\3\10\1\7\22\10\1\7\7\10\12\7\2\10"+
    "\2\0\12\10\1\0\7\7\1\0\7\7\1\0\3\10\1\0\10\7"+
    "\2\0\2\7\2\0\26\7\1\0\7\7\1\0\1\7\3\0\4\7"+
    "\2\0\1\10\1\7\7\10\2\0\2\10\2\0\3\10\1\7\10\0"+
    "\1\10\4\0\2\7\1\0\3\7\2\10\2\0\12\10\4\7\7\0"+
    "\1\7\5\0\3\10\1\0\6\7\4\0\2\7\2\0\26\7\1\0"+
    "\7\7\1\0\2\7\1\0\2\7\1\0\2\7\2\0\1\10\1\0"+
    "\5\10\4\0\2\10\2\0\3\10\3\0\1\10\7\0\4\7\1\0"+
    "\1\7\7\0\14\10\3\7\1\10\13\0\3\10\1\0\11\7\1\0"+
    "\3\7\1\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7\2\0"+
    "\1\10\1\7\10\10\1\0\3\10\1\0\3\10\2\0\1\7\17\0"+
    "\2\7\2\10\2\0\12\10\1\0\1\7\17\0\3\10\1\0\10\7"+
    "\2\0\2\7\2\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7"+
    "\2\0\1\10\1\7\7\10\2\0\2\10\2\0\3\10\10\0\2\10"+
    "\4\0\2\7\1\0\3\7\2\10\2\0\12\10\1\0\1\7\20\0"+
    "\1\10\1\7\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\3\0\3\7\3\0\14\7"+
    "\4\0\5\10\3\0\3\10\1\0\4\10\2\0\1\7\6\0\1\10"+
    "\16\0\12\10\11\0\1\7\7\0\3\10\1\0\10\7\1\0\3\7"+
    "\1\0\27\7\1\0\12\7\1\0\5\7\3\0\1\7\7\10\1\0"+
    "\3\10\1\0\4\10\7\0\2\10\1\0\2\7\6\0\2\7\2\10"+
    "\2\0\12\10\22\0\2\10\1\0\10\7\1\0\3\7\1\0\27\7"+
    "\1\0\12\7\1\0\5\7\2\0\1\10\1\7\7\10\1\0\3\10"+
    "\1\0\4\10\7\0\2\10\7\0\1\7\1\0\2\7\2\10\2\0"+
    "\12\10\1\0\2\7\17\0\2\10\1\0\10\7\1\0\3\7\1\0"+
    "\51\7\2\0\1\7\7\10\1\0\3\10\1\0\4\10\1\7\10\0"+
    "\1\10\10\0\2\7\2\10\2\0\12\10\12\0\6\7\2\0\2\10"+
    "\1\0\22\7\3\0\30\7\1\0\11\7\1\0\1\7\2\0\7\7"+
    "\3\0\1\10\4\0\6\10\1\0\1\10\1\0\10\10\22\0\2\10"+
    "\15\0\60\7\1\10\2\7\7\10\4\0\10\7\10\10\1\0\12\10"+
    "\47\0\2\7\1\0\1\7\2\0\2\7\1\0\1\7\2\0\1\7"+
    "\6\0\4\7\1\0\7\7\1\0\3\7\1\0\1\7\1\0\1\7"+
    "\2\0\2\7\1\0\4\7\1\10\2\7\6\10\1\0\2\10\1\7"+
    "\2\0\5\7\1\0\1\7\1\0\6\10\2\0\12\10\2\0\4\7"+
    "\40\0\1\7\27\0\2\10\6\0\12\10\13\0\1\10\1\0\1\10"+
    "\1\0\1\10\4\0\2\10\10\7\1\0\44\7\4\0\24\10\1\0"+
    "\2\10\5\7\13\10\1\0\44\10\11\0\1\10\71\0\53\7\24\10"+
    "\1\7\12\10\6\0\6\7\4\10\4\7\3\10\1\7\3\10\2\7"+
    "\7\10\3\7\4\10\15\7\14\10\1\7\17\10\2\0\46\7\1\0"+
    "\1\7\5\0\1\7\2\0\53\7\1\0\u014d\7\1\0\4\7\2\0"+
    "\7\7\1\0\1\7\1\0\4\7\2\0\51\7\1\0\4\7\2\0"+
    "\41\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0"+
    "\17\7\1\0\71\7\1\0\4\7\2\0\103\7\2\0\3\10\40\0"+
    "\20\7\20\0\125\7\14\0\u026c\7\2\0\21\7\1\0\32\7\5\0"+
    "\113\7\3\0\3\7\17\0\15\7\1\0\4\7\3\10\13\0\22\7"+
    "\3\10\13\0\22\7\2\10\14\0\15\7\1\0\3\7\1\0\2\10"+
    "\14\0\64\7\40\10\3\0\1\7\3\0\2\7\1\10\2\0\12\10"+
    "\41\0\3\10\2\0\12\10\6\0\130\7\10\0\51\7\1\10\1\7"+
    "\5\0\106\7\12\0\35\7\3\0\14\10\4\0\14\10\12\0\12\10"+
    "\36\7\2\0\5\7\13\0\54\7\4\0\21\10\7\7\2\10\6\0"+
    "\12\10\46\0\27\7\5\10\4\0\65\7\12\10\1\0\35\10\2\0"+
    "\13\10\6\0\12\10\15\0\1\7\130\0\5\10\57\7\21\10\7\7"+
    "\4\0\12\10\21\0\11\10\14\0\3\10\36\7\15\10\2\7\12\10"+
    "\54\7\16\10\14\0\44\7\24\10\10\0\12\10\3\0\3\7\12\10"+
    "\44\7\122\0\3\10\1\0\25\10\4\7\1\10\4\7\3\10\2\7"+
    "\11\0\300\7\47\10\25\0\4\10\u0116\7\2\0\6\7\2\0\46\7"+
    "\2\0\6\7\2\0\10\7\1\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\37\7\2\0\65\7\1\0\7\7\1\0\1\7\3\0\3\7"+
    "\1\0\7\7\3\0\4\7\2\0\6\7\4\0\15\7\5\0\3\7"+
    "\1\0\7\7\16\0\5\10\30\0\1\114\1\114\5\10\20\0\2\7"+
    "\23\0\1\7\13\0\5\10\5\0\6\10\1\0\1\7\15\0\1\7"+
    "\20\0\15\7\3\0\33\7\25\0\15\10\4\0\1\10\3\0\14\10"+
    "\21\0\1\7\4\0\1\7\2\0\12\7\1\0\1\7\3\0\5\7"+
    "\6\0\1\7\1\0\1\7\1\0\1\7\1\0\4\7\1\0\13\7"+
    "\2\0\4\7\5\0\5\7\4\0\1\7\21\0\51\7\u0a77\0\57\7"+
    "\1\0\57\7\1\0\205\7\6\0\4\7\3\10\2\7\14\0\46\7"+
    "\1\0\1\7\5\0\1\7\2\0\70\7\7\0\1\7\17\0\1\10"+
    "\27\7\11\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0"+
    "\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0\40\10\57\0"+
    "\1\7\u01d5\0\3\7\31\0\11\7\6\10\1\0\5\7\2\0\5\7"+
    "\4\0\126\7\2\0\2\10\2\0\3\7\1\0\132\7\1\0\4\7"+
    "\5\0\51\7\3\0\136\7\21\0\33\7\65\0\20\7\u0200\0\u19b6\7"+
    "\112\0\u51cd\7\63\0\u048d\7\103\0\56\7\2\0\u010d\7\3\0\20\7"+
    "\12\10\2\7\24\0\57\7\1\10\4\0\12\10\1\0\31\7\7\0"+
    "\1\10\120\7\2\10\45\0\11\7\2\0\147\7\2\0\4\7\1\0"+
    "\4\7\14\0\13\7\115\0\12\7\1\10\3\7\1\10\4\7\1\10"+
    "\27\7\5\10\20\0\1\7\7\0\64\7\14\0\2\10\62\7\21\10"+
    "\13\0\12\10\6\0\22\10\6\7\3\0\1\7\4\0\12\10\34\7"+
    "\10\10\2\0\27\7\15\10\14\0\35\7\3\0\4\10\57\7\16\10"+
    "\16\0\1\7\12\10\46\0\51\7\16\10\11\0\3\7\1\10\10\7"+
    "\2\10\2\0\12\10\6\0\27\7\3\0\1\7\1\10\4\0\60\7"+
    "\1\10\1\7\3\10\2\7\2\10\5\7\2\10\1\7\1\10\1\7"+
    "\30\0\3\7\2\0\13\7\5\10\2\0\3\7\2\10\12\0\6\7"+
    "\2\0\6\7\2\0\6\7\11\0\7\7\1\0\7\7\221\0\43\7"+
    "\10\10\1\0\2\10\2\0\12\10\6\0\u2ba4\7\14\0\27\7\4\0"+
    "\61\7\u2104\0\u016e\7\2\0\152\7\46\0\7\7\14\0\5\7\5\0"+
    "\1\7\1\10\12\7\1\0\15\7\1\0\5\7\1\0\1\7\1\0"+
    "\2\7\1\0\2\7\1\0\154\7\41\0\u016b\7\22\0\100\7\2\0"+
    "\66\7\50\0\15\7\3\0\20\10\20\0\7\10\14\0\2\7\30\0"+
    "\3\7\31\0\1\7\6\0\5\7\1\0\207\7\2\0\1\10\4\0"+
    "\1\7\13\0\12\10\7\0\32\7\4\0\1\7\1\0\32\7\13\0"+
    "\131\7\3\0\6\7\2\0\6\7\2\0\6\7\2\0\3\7\3\0"+
    "\2\7\3\0\2\7\22\0\3\10\4\0\14\7\1\0\32\7\1\0"+
    "\23\7\1\0\2\7\1\0\17\7\2\0\16\7\42\0\173\7\105\0"+
    "\65\7\210\0\1\10\202\0\35\7\3\0\61\7\57\0\37\7\21\0"+
    "\33\7\65\0\36\7\2\0\44\7\4\0\10\7\1\0\5\7\52\0"+
    "\236\7\2\0\12\10\u0356\0\6\7\2\0\1\7\1\0\54\7\1\0"+
    "\2\7\3\0\1\7\2\0\27\7\252\0\26\7\12\0\32\7\106\0"+
    "\70\7\6\0\2\7\100\0\1\7\3\10\1\0\2\10\5\0\4\10"+
    "\4\7\1\0\3\7\1\0\33\7\4\0\3\10\4\0\1\10\40\0"+
    "\35\7\203\0\66\7\12\0\26\7\12\0\23\7\215\0\111\7\u03b7\0"+
    "\3\10\65\7\17\10\37\0\12\10\20\0\3\10\55\7\13\10\2\0"+
    "\1\10\22\0\31\7\7\0\12\10\6\0\3\10\44\7\16\10\1\0"+
    "\12\10\100\0\3\10\60\7\16\10\4\7\13\0\12\10\u04a6\0\53\7"+
    "\15\10\10\0\12\10\u0936\0\u036f\7\221\0\143\7\u0b9d\0\u042f\7\u33d1\0"+
    "\u0239\7\u04c7\0\105\7\13\0\1\7\56\10\20\0\4\10\15\7\u4060\0"+
    "\2\7\u2163\0\5\10\3\0\26\10\2\0\7\10\36\0\4\10\224\0"+
    "\3\10\u01bb\0\125\7\1\0\107\7\1\0\2\7\2\0\1\7\2\0"+
    "\2\7\2\0\4\7\1\0\14\7\1\0\1\7\1\0\7\7\1\0"+
    "\101\7\1\0\4\7\2\0\10\7\1\0\7\7\1\0\34\7\1\0"+
    "\4\7\1\0\5\7\1\0\1\7\3\0\7\7\1\0\u0154\7\2\0"+
    "\31\7\1\0\31\7\1\0\37\7\1\0\31\7\1\0\37\7\1\0"+
    "\31\7\1\0\37\7\1\0\31\7\1\0\37\7\1\0\31\7\1\0"+
    "\10\7\2\0\62\10\u1600\0\4\7\1\0\33\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\12\7\1\0\4\7\1\0\1\7\1\0"+
    "\1\7\6\0\1\7\4\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\3\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0\1\7\2\0"+
    "\4\7\1\0\7\7\1\0\4\7\1\0\4\7\1\0\1\7\1\0"+
    "\12\7\1\0\21\7\5\0\3\7\1\0\5\7\1\0\21\7\u1144\0"+
    "\ua6d7\7\51\0\u1035\7\13\0\336\7\u3fe2\0\u021e\7\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\10\36\0\140\10\200\0\360\10\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\6\2\7"+
    "\1\10\1\11\1\12\1\13\24\6\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\2\41\1\42\2\1\2\43\1\1\1\0"+
    "\1\44\1\0\1\45\1\46\2\5\1\47\1\50\1\51"+
    "\1\0\3\47\1\52\1\50\1\0\1\53\1\0\1\54"+
    "\1\55\1\56\7\6\1\57\14\6\1\60\4\6\1\61"+
    "\34\6\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\60\1\73\1\74\1\75\1\76\1\77"+
    "\2\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\12\77\2\44\1\0\1\112\2\113\2\47"+
    "\1\50\2\0\1\6\1\71\1\114\4\6\1\115\4\6"+
    "\1\27\1\116\14\6\1\117\16\6\1\120\11\6\1\36"+
    "\22\6\1\121\1\122\1\123\1\100\1\0\1\124\1\0"+
    "\1\125\1\126\1\127\1\130\1\131\1\132\1\133\1\134"+
    "\1\135\1\113\2\47\1\0\3\6\1\136\1\137\2\6"+
    "\1\140\3\6\1\141\21\6\1\142\1\143\6\6\1\144"+
    "\1\145\3\6\1\146\6\6\1\147\11\6\1\150\11\6"+
    "\1\151\1\152\1\113\2\47\1\0\15\6\1\153\3\6"+
    "\1\72\1\154\1\155\14\6\1\156\4\6\1\157\1\160"+
    "\1\161\2\6\1\162\6\6\1\163\1\6\1\164\1\6"+
    "\1\34\1\165\5\6\1\166\2\6\1\113\2\47\1\0"+
    "\2\6\1\70\1\6\1\167\1\170\2\6\1\67\1\6"+
    "\1\171\1\172\1\173\1\174\1\6\1\175\1\6\1\176"+
    "\1\177\1\200\3\6\1\201\1\6\1\202\1\203\3\6"+
    "\1\204\10\6\1\75\1\205\3\6\1\33\3\6\1\206"+
    "\3\6\1\113\2\47\1\0\1\207\1\210\3\6\1\141"+
    "\3\6\1\211\3\6\1\212\3\6\1\213\3\6\1\214"+
    "\2\6\1\215\5\6\1\216\1\217\1\6\1\113\2\47"+
    "\1\0\3\6\1\220\3\6\1\221\1\222\1\6\1\223"+
    "\1\224\1\6\1\225\2\6\1\226\1\227\1\230\1\6"+
    "\1\231\1\6\1\232\1\233\1\234\1\113\2\47\1\0"+
    "\3\6\1\235\6\6\1\236\1\237\1\6\1\113\2\47"+
    "\1\0\10\6\1\240\1\6\1\0\2\47\1\241\4\6"+
    "\1\242\4\6\1\0\2\47\4\6\1\243\1\244\1\245"+
    "\1\6\1\0\2\47\1\6\1\246\1\247\1\250\1\6"+
    "\1\0\2\47\2\6\1\0\2\47\1\251\1\6\1\0"+
    "\2\47\1\252\1\0\1\47\1\50\1\0\5\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[624];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\117\0\236\0\355\0\u013c\0\355\0\u018b\0\u01da"+
    "\0\u0229\0\u0278\0\u02c7\0\u0316\0\u0365\0\u03b4\0\355\0\355"+
    "\0\u0403\0\u0452\0\u04a1\0\u04f0\0\u053f\0\u058e\0\u05dd\0\u062c"+
    "\0\u067b\0\u06ca\0\u0719\0\u0768\0\u07b7\0\u0806\0\u0855\0\u08a4"+
    "\0\u08f3\0\u0942\0\u0991\0\u09e0\0\355\0\355\0\355\0\355"+
    "\0\355\0\355\0\355\0\355\0\u0a2f\0\u0a7e\0\u0acd\0\u0b1c"+
    "\0\355\0\355\0\355\0\u0b6b\0\u0bba\0\u0c09\0\u0c58\0\u0ca7"+
    "\0\u0cf6\0\u0d45\0\355\0\355\0\u0d94\0\u0de3\0\u0e32\0\355"+
    "\0\u0e81\0\u0de3\0\u0ed0\0\u0f1f\0\355\0\355\0\u0f6e\0\355"+
    "\0\u0fbd\0\u100c\0\355\0\u105b\0\u10aa\0\u10f9\0\u1148\0\355"+
    "\0\u1197\0\u11e6\0\355\0\u1235\0\355\0\355\0\355\0\u1284"+
    "\0\u12d3\0\u1322\0\u1371\0\u13c0\0\u140f\0\u145e\0\u0278\0\u14ad"+
    "\0\u14fc\0\u154b\0\u159a\0\u15e9\0\u1638\0\u1687\0\u16d6\0\u1725"+
    "\0\u1774\0\u17c3\0\u1812\0\u1861\0\u18b0\0\u18ff\0\u194e\0\u199d"+
    "\0\u19ec\0\u1a3b\0\u1a8a\0\u1ad9\0\u1b28\0\u1b77\0\u1bc6\0\u1c15"+
    "\0\u1c64\0\u1cb3\0\u1d02\0\u1d51\0\u1da0\0\u1def\0\u1e3e\0\u1e8d"+
    "\0\u1edc\0\u1f2b\0\u1f7a\0\u1fc9\0\u2018\0\u2067\0\u20b6\0\u2105"+
    "\0\u2154\0\u21a3\0\u21f2\0\u2241\0\u2290\0\355\0\355\0\u22df"+
    "\0\355\0\u232e\0\355\0\355\0\355\0\355\0\355\0\355"+
    "\0\355\0\355\0\355\0\355\0\u237d\0\u23cc\0\355\0\355"+
    "\0\355\0\355\0\355\0\355\0\355\0\355\0\355\0\u241b"+
    "\0\u246a\0\u24b9\0\u2508\0\u2557\0\u25a6\0\u25f5\0\u2644\0\u2693"+
    "\0\u26e2\0\u2731\0\355\0\u2780\0\355\0\u27cf\0\u281e\0\u286d"+
    "\0\u28bc\0\u290b\0\u295a\0\u29a9\0\u29f8\0\u2a47\0\u0278\0\u2a96"+
    "\0\u2ae5\0\u2b34\0\u2b83\0\u0278\0\u2bd2\0\u2c21\0\u2c70\0\u2cbf"+
    "\0\u2d0e\0\u0278\0\u2d5d\0\u2dac\0\u2dfb\0\u2e4a\0\u2e99\0\u2ee8"+
    "\0\u2f37\0\u2f86\0\u2fd5\0\u3024\0\u3073\0\u30c2\0\u0278\0\u3111"+
    "\0\u3160\0\u31af\0\u31fe\0\u324d\0\u329c\0\u32eb\0\u333a\0\u3389"+
    "\0\u33d8\0\u3427\0\u3476\0\u34c5\0\u3514\0\u0278\0\u3563\0\u35b2"+
    "\0\u3601\0\u3650\0\u369f\0\u36ee\0\u373d\0\u378c\0\u37db\0\u382a"+
    "\0\u3879\0\u38c8\0\u3917\0\u3966\0\u39b5\0\u3a04\0\u3a53\0\u3aa2"+
    "\0\u3af1\0\u3b40\0\u3b8f\0\u3bde\0\u3c2d\0\u3c7c\0\u3ccb\0\u3d1a"+
    "\0\u3d69\0\u3db8\0\355\0\u3e07\0\355\0\355\0\u246a\0\355"+
    "\0\u3e56\0\355\0\355\0\355\0\355\0\355\0\355\0\355"+
    "\0\355\0\355\0\u3ea5\0\u3ef4\0\u3f43\0\u3f92\0\u3fe1\0\u4030"+
    "\0\u407f\0\u0278\0\u0278\0\u40ce\0\u411d\0\u0278\0\u416c\0\u41bb"+
    "\0\u420a\0\u4259\0\u42a8\0\u42f7\0\u4346\0\u4395\0\u43e4\0\u4433"+
    "\0\u4482\0\u44d1\0\u4520\0\u456f\0\u45be\0\u460d\0\u465c\0\u46ab"+
    "\0\u46fa\0\u4749\0\u4798\0\u0278\0\u0278\0\u47e7\0\u4836\0\u4885"+
    "\0\u48d4\0\u4923\0\u4972\0\u0278\0\u0278\0\u49c1\0\u4a10\0\u4a5f"+
    "\0\u0278\0\u4aae\0\u4afd\0\u4b4c\0\u4b9b\0\u4bea\0\u4c39\0\u4c88"+
    "\0\u4cd7\0\u4d26\0\u4d75\0\u4dc4\0\u4e13\0\u4e62\0\u4eb1\0\u4f00"+
    "\0\u4f4f\0\u0278\0\u4f9e\0\u4fed\0\u503c\0\u508b\0\u50da\0\u5129"+
    "\0\u5178\0\u51c7\0\u5216\0\u0278\0\355\0\u5265\0\u52b4\0\u5303"+
    "\0\u5352\0\u53a1\0\u53f0\0\u543f\0\u548e\0\u54dd\0\u552c\0\u557b"+
    "\0\u55ca\0\u5619\0\u5668\0\u56b7\0\u5706\0\u5755\0\u0278\0\u57a4"+
    "\0\u57f3\0\u5842\0\u0278\0\u0278\0\u0278\0\u5891\0\u58e0\0\u592f"+
    "\0\u597e\0\u59cd\0\u5a1c\0\u5a6b\0\u5aba\0\u5b09\0\u5b58\0\u5ba7"+
    "\0\u5bf6\0\u0278\0\u5c45\0\u5c94\0\u5ce3\0\u5d32\0\u0278\0\u0278"+
    "\0\u5d81\0\u5dd0\0\u5e1f\0\u0278\0\u5e6e\0\u5ebd\0\u5f0c\0\u5f5b"+
    "\0\u5faa\0\u5ff9\0\u0278\0\u6048\0\u0278\0\u6097\0\u0278\0\u0278"+
    "\0\u60e6\0\u6135\0\u6184\0\u61d3\0\u6222\0\u0278\0\u6271\0\u62c0"+
    "\0\u630f\0\u635e\0\u63ad\0\u63fc\0\u644b\0\u649a\0\u0278\0\u64e9"+
    "\0\u0278\0\u0278\0\u6538\0\u6587\0\u0278\0\u65d6\0\u0278\0\u0278"+
    "\0\u6625\0\u0278\0\u6674\0\u0278\0\u66c3\0\u0278\0\u0278\0\u0278"+
    "\0\u6712\0\u6761\0\u67b0\0\u0278\0\u67ff\0\u0278\0\u0278\0\u684e"+
    "\0\u689d\0\u68ec\0\u0278\0\u693b\0\u698a\0\u69d9\0\u6a28\0\u6a77"+
    "\0\u6ac6\0\u6b15\0\u6b64\0\u0278\0\u0278\0\u6bb3\0\u6c02\0\u6c51"+
    "\0\u0278\0\u6ca0\0\u6cef\0\u6d3e\0\u0278\0\u6d8d\0\u6ddc\0\u6e2b"+
    "\0\u6e7a\0\u6ec9\0\u6f18\0\u6f67\0\u0278\0\u0278\0\u6fb6\0\u7005"+
    "\0\u7054\0\u0278\0\u70a3\0\u70f2\0\u7141\0\u0278\0\u7190\0\u71df"+
    "\0\u722e\0\u0278\0\u727d\0\u72cc\0\u731b\0\u0278\0\u736a\0\u73b9"+
    "\0\u7408\0\u0278\0\u7457\0\u74a6\0\u0278\0\u74f5\0\u7544\0\u7593"+
    "\0\u75e2\0\u7631\0\u0278\0\u0278\0\u7680\0\u76cf\0\u771e\0\u776d"+
    "\0\u77bc\0\u780b\0\u785a\0\u78a9\0\u0278\0\u78f8\0\u7947\0\u7996"+
    "\0\u0278\0\u0278\0\u79e5\0\u0278\0\u0278\0\u7a34\0\u0278\0\u7a83"+
    "\0\u7ad2\0\u0278\0\u0278\0\u0278\0\u7b21\0\u0278\0\u7b70\0\u0278"+
    "\0\u0278\0\u0278\0\u7bbf\0\u7c0e\0\u7c5d\0\u7cac\0\u7cfb\0\u7d4a"+
    "\0\u7d99\0\u0278\0\u7de8\0\u7e37\0\u7e86\0\u7ed5\0\u7f24\0\u7f73"+
    "\0\u0278\0\u0278\0\u7fc2\0\u8011\0\u8060\0\u80af\0\u80fe\0\u814d"+
    "\0\u819c\0\u81eb\0\u823a\0\u8289\0\u82d8\0\u8327\0\u8376\0\u0278"+
    "\0\u83c5\0\u8414\0\u8463\0\u84b2\0\355\0\u8501\0\u8550\0\u859f"+
    "\0\u85ee\0\u0278\0\u863d\0\u868c\0\u86db\0\u872a\0\u8779\0\u87c8"+
    "\0\u8817\0\u8866\0\u88b5\0\u8904\0\u8953\0\u0278\0\u0278\0\u0278"+
    "\0\u89a2\0\u89f1\0\u8a40\0\u8a8f\0\u8ade\0\u0278\0\u0278\0\u0278"+
    "\0\u8b2d\0\u8b7c\0\u8bcb\0\u8c1a\0\u8c69\0\u8cb8\0\u8d07\0\u8d56"+
    "\0\u8da5\0\u0278\0\u8df4\0\u8e43\0\u8e92\0\u8ee1\0\u0278\0\u8f30"+
    "\0\u8f7f\0\u8f7f\0\u8fce\0\u901d\0\u906c\0\u90bb\0\u910a\0\u9159";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[624];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\12\1\4"+
    "\1\13\1\14\3\12\3\14\1\12\1\15\1\12\1\16"+
    "\1\17\1\20\1\4\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\12\1\32\1\12\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\2\12"+
    "\2\14\1\12\1\43\1\44\1\12\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\3\14\1\12\1\0\1\6\1\0\1\71\1\72"+
    "\1\73\22\71\1\74\1\71\1\75\67\71\1\76\1\77"+
    "\1\100\23\76\1\4\1\101\64\76\3\102\121\0\1\6"+
    "\120\0\1\103\1\104\66\0\1\105\116\0\1\106\22\0"+
    "\1\11\1\107\1\110\114\11\7\0\13\12\1\0\1\12"+
    "\4\0\34\12\24\0\4\12\2\0\1\12\11\0\1\111"+
    "\1\112\1\113\1\114\1\0\1\115\1\116\1\117\1\120"+
    "\1\121\1\122\5\0\1\113\5\0\1\120\1\123\1\0"+
    "\1\122\4\0\1\114\6\0\1\117\1\115\30\0\2\117"+
    "\1\112\1\123\14\0\2\14\1\113\2\0\3\14\1\120"+
    "\1\121\1\122\5\0\1\113\5\0\1\120\1\123\1\0"+
    "\1\122\13\0\2\14\30\0\3\14\1\123\14\0\2\121"+
    "\3\0\3\121\35\0\2\121\30\0\3\121\22\0\1\124"+
    "\5\0\1\125\47\0\1\126\1\127\30\0\13\12\1\0"+
    "\1\12\4\0\1\12\1\130\2\12\1\131\1\132\7\12"+
    "\1\133\3\12\1\134\12\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\6\12\1\135\25\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\4\12\1\136\2\12\1\137\4\12\1\140\17\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\6\12\1\141\25\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\1\142\5\12\1\143"+
    "\3\12\1\144\6\12\1\145\12\12\24\0\4\12\2\0"+
    "\1\12\7\0\13\12\1\0\1\12\4\0\2\12\1\146"+
    "\12\12\1\147\7\12\1\150\2\12\1\151\1\152\2\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\20\12\1\153\2\12\1\154\10\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\1\155"+
    "\1\156\4\12\1\157\14\12\1\160\10\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\6\12"+
    "\1\161\3\12\1\162\15\12\1\163\3\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\1\12"+
    "\1\164\2\12\1\165\12\12\1\166\14\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\6\12"+
    "\1\167\12\12\1\170\12\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\12\12\1\171\10\12"+
    "\1\172\1\12\1\173\2\12\1\174\3\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\1\175"+
    "\1\176\4\12\1\177\16\12\1\200\6\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\6\12"+
    "\1\201\25\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\21\12\1\202\1\12\1\203\10\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\4\12\1\204\1\205\26\12\24\0\4\12\2\0"+
    "\1\12\7\0\13\12\1\0\1\12\4\0\2\12\1\206"+
    "\3\12\1\207\14\12\1\210\10\12\24\0\4\12\2\0"+
    "\1\12\7\0\13\12\1\0\1\12\4\0\12\12\1\211"+
    "\21\12\24\0\4\12\2\0\1\12\7\0\13\12\1\0"+
    "\1\12\4\0\16\12\1\212\6\12\1\213\6\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\2\12\1\214\3\12\1\215\25\12\24\0\4\12\2\0"+
    "\1\12\74\0\1\216\116\0\1\217\1\220\115\0\1\221"+
    "\1\0\1\222\114\0\1\223\116\0\1\224\6\0\1\225"+
    "\107\0\1\226\7\0\1\227\106\0\1\230\10\0\1\231"+
    "\105\0\1\232\116\0\1\233\22\0\1\71\2\0\22\71"+
    "\1\0\1\71\1\0\67\71\2\0\1\73\114\0\1\234"+
    "\2\0\6\234\1\235\4\234\2\235\1\236\4\234\1\237"+
    "\1\240\1\241\4\234\1\242\2\234\1\243\5\234\1\244"+
    "\4\234\1\245\1\246\2\234\1\236\1\235\30\234\2\236"+
    "\2\234\31\0\1\247\72\0\1\100\114\0\1\234\2\0"+
    "\6\234\1\250\4\234\2\250\1\251\4\234\1\252\1\253"+
    "\1\254\4\234\1\255\2\234\1\256\5\234\1\257\4\234"+
    "\1\260\1\261\2\234\1\251\1\250\30\234\2\251\2\234"+
    "\3\0\1\103\1\262\1\263\114\103\5\104\1\264\111\104"+
    "\2\0\1\110\125\0\1\111\1\112\1\265\2\0\1\115"+
    "\1\116\1\117\1\120\1\121\1\122\5\0\1\265\5\0"+
    "\1\120\1\123\1\0\1\122\13\0\1\117\1\115\30\0"+
    "\2\117\1\112\1\123\14\0\2\112\3\0\3\112\1\120"+
    "\1\121\1\122\13\0\1\120\1\123\1\0\1\122\13\0"+
    "\2\112\30\0\3\112\1\123\14\0\1\266\1\267\2\0"+
    "\5\267\1\0\1\267\4\0\1\267\6\0\2\267\1\0"+
    "\1\267\3\0\1\267\3\0\1\267\3\0\2\267\30\0"+
    "\4\267\14\0\1\270\1\112\1\265\2\0\3\270\1\120"+
    "\1\121\1\122\5\0\1\265\5\0\1\120\1\123\1\0"+
    "\1\122\13\0\2\270\30\0\2\270\1\112\1\123\14\0"+
    "\1\117\1\112\1\265\2\0\3\117\1\120\1\121\1\122"+
    "\5\0\1\265\5\0\1\120\1\123\1\0\1\122\13\0"+
    "\2\117\30\0\2\117\1\112\1\123\14\0\1\271\1\112"+
    "\1\265\2\0\3\271\1\120\1\121\1\122\5\0\1\265"+
    "\5\0\1\120\1\123\1\0\1\122\13\0\2\271\30\0"+
    "\2\271\1\112\1\123\14\0\2\121\3\0\3\121\1\120"+
    "\1\0\1\122\13\0\1\120\1\123\1\0\1\122\13\0"+
    "\2\121\30\0\3\121\1\123\14\0\2\272\3\0\3\272"+
    "\3\0\1\273\31\0\2\272\25\0\1\273\2\0\3\272"+
    "\23\0\1\274\106\0\13\12\1\0\1\12\4\0\2\12"+
    "\1\275\31\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\10\12\1\276\23\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\14\12"+
    "\1\277\17\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\6\12\1\300\25\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\15\12"+
    "\1\301\16\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\4\12\1\302\27\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\1\12"+
    "\1\303\13\12\1\304\16\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\20\12\1\305\13\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\15\12\1\306\16\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\14\12\1\307\17\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\12\12\1\310\2\12\1\311\16\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\31\12"+
    "\1\312\2\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\1\12\1\313\32\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\3\12"+
    "\1\314\27\12\1\315\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\1\316\22\12\1\317\10\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\6\12\1\320\25\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\4\12\1\321\27\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\2\12\1\322\31\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\12\12\1\323\21\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\11\12\1\324\22\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\1\12\1\325\32\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\6\12\1\326\25\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\23\12\1\327\10\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\2\12\1\330\31\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\21\12\1\331\12\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\1\12\1\332\5\12\1\333\6\12\1\334\15\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\4\12\1\335\27\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\5\12\1\336\26\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\21\12\1\337\12\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\15\12\1\340\2\12"+
    "\1\341\13\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\10\12\1\342\23\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\15\12"+
    "\1\343\16\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\14\12\1\344\17\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\21\12"+
    "\1\345\6\12\1\346\3\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\2\12\1\347\20\12"+
    "\1\350\10\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\20\12\1\351\13\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\5\12"+
    "\1\352\7\12\1\353\16\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\1\354\33\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\4\12\1\355\7\12\1\356\17\12\24\0\4\12\2\0"+
    "\1\12\7\0\13\12\1\0\1\12\4\0\1\357\33\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\23\12\1\360\10\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\22\12\1\361\11\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\2\12\1\362\3\12\1\363\25\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\2\12"+
    "\1\364\2\12\1\365\26\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\2\12\1\366\31\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\15\12\1\367\16\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\6\12\1\370\25\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\12\12\1\371\21\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\2\12\1\372\1\373"+
    "\7\12\1\374\1\12\1\375\16\12\24\0\4\12\2\0"+
    "\1\12\7\0\13\12\1\0\1\12\4\0\25\12\1\376"+
    "\6\12\24\0\4\12\2\0\1\12\7\0\13\12\1\0"+
    "\1\12\4\0\2\12\1\377\31\12\24\0\4\12\2\0"+
    "\1\12\7\0\13\12\1\0\1\12\4\0\23\12\1\u0100"+
    "\10\12\24\0\4\12\2\0\1\12\7\0\13\12\1\0"+
    "\1\12\4\0\1\12\1\u0101\1\u0102\31\12\24\0\4\12"+
    "\2\0\1\12\74\0\1\u0103\1\u0104\115\0\1\u0105\33\0"+
    "\1\236\4\0\3\236\35\0\2\236\30\0\2\236\16\0"+
    "\1\u0106\4\0\3\u0106\35\0\2\u0106\30\0\2\u0106\16\0"+
    "\1\u0107\4\0\3\u0107\5\0\1\u0108\27\0\2\u0107\30\0"+
    "\2\u0107\16\0\1\u0109\4\0\3\u0109\5\0\1\u0108\27\0"+
    "\2\u0109\30\0\2\u0109\33\0\1\u010a\116\0\1\u010b\116\0"+
    "\1\u010c\116\0\1\u010d\116\0\1\u010e\116\0\1\u010f\116\0"+
    "\1\u0110\116\0\1\u0111\72\0\1\263\114\0\4\104\1\263"+
    "\1\264\111\104\11\0\1\266\1\267\1\u0112\1\0\5\267"+
    "\1\0\1\267\4\0\1\267\1\u0112\5\0\2\267\1\0"+
    "\1\267\3\0\1\267\3\0\1\267\3\0\2\267\30\0"+
    "\4\267\14\0\2\u0113\1\u0112\1\0\5\u0113\1\0\1\u0113"+
    "\4\0\1\u0113\1\u0112\5\0\2\u0113\1\0\1\u0113\3\0"+
    "\1\u0113\3\0\1\u0113\3\0\2\u0113\30\0\4\u0113\14\0"+
    "\1\u0114\1\112\1\265\2\0\3\u0114\1\120\1\121\1\122"+
    "\5\0\1\265\5\0\1\120\1\123\1\0\1\122\13\0"+
    "\2\u0114\30\0\2\u0114\1\112\1\123\14\0\1\u0115\1\112"+
    "\1\265\2\0\3\u0115\1\120\1\121\1\122\5\0\1\265"+
    "\5\0\1\120\1\123\1\0\1\122\13\0\2\u0115\30\0"+
    "\2\u0115\1\112\1\123\14\0\2\272\3\0\3\272\1\120"+
    "\15\0\1\120\1\123\15\0\2\272\30\0\3\272\1\123"+
    "\14\0\2\272\3\0\3\272\35\0\2\272\30\0\3\272"+
    "\114\0\1\u0116\15\0\13\12\1\0\1\12\4\0\3\12"+
    "\1\u0117\30\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\11\12\1\u0118\22\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\14\12"+
    "\1\u0119\17\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\6\12\1\u011a\25\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\3\12"+
    "\1\u011b\30\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\2\12\1\u011c\31\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\6\12"+
    "\1\u011d\25\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\6\12\1\u011e\25\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\12\12"+
    "\1\u011f\21\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\17\12\1\u0120\14\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\11\12"+
    "\1\u0121\22\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\1\12\1\u0122\32\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\4\12"+
    "\1\u0123\27\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\12\12\1\u0124\21\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\15\12"+
    "\1\u0125\16\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\21\12\1\u0126\12\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\23\12"+
    "\1\u0127\10\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\16\12\1\u0128\15\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\15\12"+
    "\1\u0129\16\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\23\12\1\u012a\10\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\12\12"+
    "\1\u012b\21\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\5\12\1\u012c\26\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\1\u012d"+
    "\33\12\24\0\4\12\2\0\1\12\7\0\13\12\1\0"+
    "\1\12\4\0\12\12\1\u012e\21\12\24\0\4\12\2\0"+
    "\1\12\7\0\13\12\1\0\1\12\4\0\22\12\1\u012f"+
    "\11\12\24\0\4\12\2\0\1\12\7\0\13\12\1\0"+
    "\1\12\4\0\12\12\1\u0130\21\12\24\0\4\12\2\0"+
    "\1\12\7\0\13\12\1\0\1\12\4\0\1\u0131\33\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\1\12\1\u0132\32\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\1\u0133\33\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\12\12\1\u0134\21\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\14\12\1\u0135\17\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\12\12\1\u0136\21\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\1\12\1\u0137\4\12\1\u0138"+
    "\25\12\24\0\4\12\2\0\1\12\7\0\13\12\1\0"+
    "\1\12\4\0\21\12\1\u0139\12\12\24\0\4\12\2\0"+
    "\1\12\7\0\13\12\1\0\1\12\4\0\1\u013a\33\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\20\12\1\u013b\13\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\12\12\1\u013c\21\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\5\12\1\u013d\26\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\6\12\1\u013e\3\12"+
    "\1\u013f\21\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\12\12\1\u0140\21\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\12\12"+
    "\1\u0141\21\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\16\12\1\u0142\15\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\5\12"+
    "\1\u0143\26\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\5\12\1\u0144\7\12\1\u0145\1\u0146"+
    "\15\12\24\0\4\12\2\0\1\12\7\0\13\12\1\0"+
    "\1\12\4\0\20\12\1\u0147\13\12\24\0\4\12\2\0"+
    "\1\12\7\0\13\12\1\0\1\12\4\0\23\12\1\u0148"+
    "\10\12\24\0\4\12\2\0\1\12\7\0\13\12\1\0"+
    "\1\12\4\0\11\12\1\u0149\22\12\24\0\4\12\2\0"+
    "\1\12\7\0\13\12\1\0\1\12\4\0\1\12\1\u014a"+
    "\32\12\24\0\4\12\2\0\1\12\7\0\13\12\1\0"+
    "\1\12\4\0\32\12\1\u014b\1\12\24\0\4\12\2\0"+
    "\1\12\7\0\13\12\1\0\1\12\4\0\15\12\1\u014c"+
    "\16\12\24\0\4\12\2\0\1\12\7\0\13\12\1\0"+
    "\1\12\4\0\6\12\1\u014d\25\12\24\0\4\12\2\0"+
    "\1\12\7\0\13\12\1\0\1\12\4\0\2\12\1\u014e"+
    "\31\12\24\0\4\12\2\0\1\12\7\0\13\12\1\0"+
    "\1\12\4\0\4\12\1\u014f\27\12\24\0\4\12\2\0"+
    "\1\12\7\0\13\12\1\0\1\12\4\0\1\u0150\5\12"+
    "\1\u0151\25\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\1\12\1\u0152\32\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\1\u0153"+
    "\33\12\24\0\4\12\2\0\1\12\7\0\13\12\1\0"+
    "\1\12\4\0\4\12\1\u0154\27\12\24\0\4\12\2\0"+
    "\1\12\7\0\13\12\1\0\1\12\4\0\2\12\1\u0155"+
    "\31\12\24\0\4\12\2\0\1\12\7\0\13\12\1\0"+
    "\1\12\4\0\21\12\1\u0156\12\12\24\0\4\12\2\0"+
    "\1\12\7\0\13\12\1\0\1\12\4\0\21\12\1\u0157"+
    "\12\12\24\0\4\12\2\0\1\12\7\0\13\12\1\0"+
    "\1\12\4\0\1\u0158\33\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\1\12\1\u0159\32\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\15\12\1\u015a\16\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\1\u015b\33\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\10\12\1\u015c\23\12\24\0\4\12\2\0\1\12\74\0"+
    "\1\u015d\50\0\1\u0108\101\0\2\u015e\1\u0112\1\0\5\u015e"+
    "\1\0\1\u015e\4\0\1\u015e\1\u0112\5\0\2\u015e\1\0"+
    "\1\u015e\3\0\1\u015e\3\0\1\u015e\3\0\2\u015e\30\0"+
    "\4\u015e\14\0\1\u015f\1\112\1\265\2\0\3\u015f\1\120"+
    "\1\121\1\122\5\0\1\265\5\0\1\120\1\123\1\0"+
    "\1\122\13\0\2\u015f\30\0\2\u015f\1\112\1\123\14\0"+
    "\1\u0160\1\112\1\265\2\0\3\u0160\1\120\1\121\1\122"+
    "\5\0\1\265\5\0\1\120\1\123\1\0\1\122\13\0"+
    "\2\u0160\30\0\2\u0160\1\112\1\123\114\0\1\u0161\14\0"+
    "\13\12\1\0\1\12\4\0\4\12\1\u0162\27\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\12\12\1\u0163\21\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\2\12\1\u0164\31\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\4\12\1\u0165\27\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\23\12\1\u0166\10\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\5\12\1\u0167\26\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\16\12\1\u0168\15\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\12\12\1\u0169\21\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\20\12\1\u016a\13\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\12\12\1\u016b\21\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\6\12\1\u016c\25\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\2\12\1\u016d\31\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\16\12\1\u016e\15\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\15\12\1\u016f\16\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\25\12\1\u0170\6\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\16\12\1\u0171\15\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\1\u0172\33\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\13\12"+
    "\1\u0173\20\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\12\12\1\u0174\21\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\15\12"+
    "\1\u0175\16\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\4\12\1\u0176\27\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\1\12"+
    "\1\u0177\32\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\15\12\1\u0178\16\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\21\12"+
    "\1\u0179\12\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\15\12\1\u017a\16\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\14\12"+
    "\1\u017b\17\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\23\12\1\u017c\10\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\2\12"+
    "\1\u017d\31\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\23\12\1\u017e\10\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\1\12"+
    "\1\u017f\32\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\22\12\1\u0180\11\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\1\12"+
    "\1\u0181\32\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\31\12\1\u0182\2\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\1\u0183"+
    "\33\12\24\0\4\12\2\0\1\12\7\0\13\12\1\0"+
    "\1\12\4\0\2\12\1\u0184\1\12\1\u0185\3\12\1\u0186"+
    "\23\12\24\0\4\12\2\0\1\12\7\0\13\12\1\0"+
    "\1\12\4\0\25\12\1\u0187\6\12\24\0\4\12\2\0"+
    "\1\12\7\0\13\12\1\0\1\12\4\0\5\12\1\u0188"+
    "\26\12\24\0\4\12\2\0\1\12\7\0\13\12\1\0"+
    "\1\12\4\0\15\12\1\u0189\16\12\24\0\4\12\2\0"+
    "\1\12\7\0\13\12\1\0\1\12\4\0\2\12\1\u018a"+
    "\31\12\24\0\4\12\2\0\1\12\7\0\13\12\1\0"+
    "\1\12\4\0\12\12\1\u018b\21\12\24\0\4\12\2\0"+
    "\1\12\7\0\13\12\1\0\1\12\4\0\1\12\1\u018c"+
    "\32\12\24\0\4\12\2\0\1\12\7\0\10\12\1\u018d"+
    "\2\12\1\0\1\12\4\0\27\12\1\u018e\4\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\12\12\1\u018f\21\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\2\12\1\u0190\31\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\1\u0191\33\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\12\12\1\u0192\21\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\4\12"+
    "\1\u0193\27\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\3\12\1\u0194\30\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\3\12"+
    "\1\u0195\30\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\4\12\1\u0196\27\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\23\12"+
    "\1\u0197\10\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\24\12\1\u0198\7\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\15\12"+
    "\1\u0199\16\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\5\12\1\u019a\26\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\2\12"+
    "\1\u019b\31\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\23\12\1\u019c\10\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\23\12"+
    "\1\u019d\10\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\12\12\1\u019e\21\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\21\12"+
    "\1\u019f\12\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\15\12\1\u01a0\16\12\24\0\4\12"+
    "\2\0\1\12\11\0\2\u01a1\1\u0112\1\0\5\u01a1\1\0"+
    "\1\u01a1\4\0\1\u01a1\1\u0112\5\0\2\u01a1\1\0\1\u01a1"+
    "\3\0\1\u01a1\3\0\1\u01a1\3\0\2\u01a1\30\0\4\u01a1"+
    "\14\0\1\u01a2\1\112\1\265\2\0\3\u01a2\1\120\1\121"+
    "\1\122\5\0\1\265\5\0\1\120\1\123\1\0\1\122"+
    "\13\0\2\u01a2\30\0\2\u01a2\1\112\1\123\14\0\1\u01a3"+
    "\1\112\1\265\2\0\3\u01a3\1\120\1\121\1\122\5\0"+
    "\1\265\5\0\1\120\1\123\1\0\1\122\13\0\2\u01a3"+
    "\30\0\2\u01a3\1\112\1\123\113\0\1\u01a4\15\0\13\12"+
    "\1\0\1\12\4\0\1\u01a5\5\12\1\u01a6\25\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\13\12\1\u01a7\20\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\16\12\1\u01a8\15\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\12\12\1\u01a9\21\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\15\12\1\u01aa\16\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\20\12\1\u01ab\13\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\12\12\1\u01ac\21\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\13\12\1\u01ad\20\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\15\12\1\u01ae\16\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\10\12\1\u01af\23\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\7\12\1\u01b0\24\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\16\12\1\u01b1\15\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\15\12\1\u01b2\16\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\23\12\1\u01b3\10\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\25\12\1\u01b4\6\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\15\12\1\u01b5\16\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\10\12\1\u01b6\23\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\12\12\1\u01b7\21\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\12\12\1\u01b8\21\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\1\12\1\u01b9\32\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\30\12\1\u01ba\3\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\2\12\1\u01bb\31\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\4\12\1\u01bc\27\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\16\12\1\u01bd\15\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\15\12\1\u01be\16\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\12\12\1\u01bf\21\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\1\12\1\u01c0\32\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\1\u01c1\33\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\10\12\1\u01c2\23\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\10\12"+
    "\1\u01c3\23\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\1\u01c4\33\12\24\0\4\12\2\0"+
    "\1\12\7\0\13\12\1\0\1\12\4\0\12\12\1\u01c5"+
    "\21\12\24\0\4\12\2\0\1\12\7\0\13\12\1\0"+
    "\1\12\4\0\11\12\1\u01c6\1\u01c7\21\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\4\12"+
    "\1\u01c8\27\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\20\12\1\u01c9\13\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\26\12"+
    "\1\u01ca\5\12\24\0\4\12\2\0\1\12\7\0\7\12"+
    "\1\u01cb\3\12\1\0\1\12\4\0\34\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\13\12"+
    "\1\u01cc\20\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\16\12\1\u01cd\15\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\15\12"+
    "\1\u01ce\16\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\16\12\1\u01cf\15\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\4\12"+
    "\1\u01d0\27\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\10\12\1\u01d1\23\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\12\12"+
    "\1\u01d2\21\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\15\12\1\u01d3\16\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\23\12"+
    "\1\u01d4\10\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\4\12\1\u01d5\27\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\11\12"+
    "\1\u01d6\22\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\1\u01d7\33\12\24\0\4\12\2\0"+
    "\1\12\7\0\13\12\1\0\1\12\4\0\2\12\1\u01d8"+
    "\31\12\24\0\4\12\2\0\1\12\11\0\2\u01d9\1\u0112"+
    "\1\0\5\u01d9\1\0\1\u01d9\4\0\1\u01d9\1\u0112\5\0"+
    "\2\u01d9\1\0\1\u01d9\3\0\1\u01d9\3\0\1\u01d9\3\0"+
    "\2\u01d9\30\0\4\u01d9\14\0\1\u01da\1\112\1\265\2\0"+
    "\3\u01da\1\120\1\121\1\122\5\0\1\265\5\0\1\120"+
    "\1\123\1\0\1\122\13\0\2\u01da\30\0\2\u01da\1\112"+
    "\1\123\14\0\1\u01db\1\112\1\265\2\0\3\u01db\1\120"+
    "\1\121\1\122\5\0\1\265\5\0\1\120\1\123\1\0"+
    "\1\122\13\0\2\u01db\30\0\2\u01db\1\112\1\123\115\0"+
    "\1\u01dc\13\0\13\12\1\0\1\12\4\0\5\12\1\u01dd"+
    "\26\12\24\0\4\12\2\0\1\12\7\0\13\12\1\0"+
    "\1\12\4\0\7\12\1\u01de\24\12\24\0\4\12\2\0"+
    "\1\12\7\0\13\12\1\0\1\12\4\0\11\12\1\u01df"+
    "\22\12\24\0\4\12\2\0\1\12\7\0\13\12\1\0"+
    "\1\12\4\0\1\u01e0\33\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\20\12\1\u01e1\13\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\23\12\1\u01e2\10\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\11\12\1\u01e3\22\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\6\12\1\u01e4\25\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\6\12\1\u01e5\25\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\15\12\1\u01e6\16\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\20\12\1\u01e7\13\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\16\12\1\u01e8\15\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\2\12\1\u01e9\31\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\12\12\1\u01ea\21\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\15\12\1\u01eb\16\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\11\12\1\u01ec\22\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\14\12\1\u01ed\17\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\7\12\1\u01ee\24\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\16\12\1\u01ef\15\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\17\12\1\u01f0\14\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\21\12\1\u01f1\12\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\15\12\1\u01f2\16\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\11\12\1\u01f3\22\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\11\12\1\u01f4\22\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\12\12\1\u01f5\21\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\15\12\1\u01f6\16\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\12\12\1\u01f7\21\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\23\12\1\u01f8\10\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\12\12\1\u01f9\21\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\12\12\1\u01fa\21\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\15\12\1\u01fb\16\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\1\12\1\u01fc\32\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\1\12\1\u01fd\32\12"+
    "\24\0\4\12\2\0\1\12\11\0\2\u01fe\1\u0112\1\0"+
    "\5\u01fe\1\0\1\u01fe\4\0\1\u01fe\1\u0112\5\0\2\u01fe"+
    "\1\0\1\u01fe\3\0\1\u01fe\3\0\1\u01fe\3\0\2\u01fe"+
    "\30\0\4\u01fe\14\0\1\u01ff\1\112\1\265\2\0\3\u01ff"+
    "\1\120\1\121\1\122\5\0\1\265\5\0\1\120\1\123"+
    "\1\0\1\122\13\0\2\u01ff\30\0\2\u01ff\1\112\1\123"+
    "\14\0\1\u0200\1\112\1\265\2\0\3\u0200\1\120\1\121"+
    "\1\122\5\0\1\265\5\0\1\120\1\123\1\0\1\122"+
    "\13\0\2\u0200\30\0\2\u0200\1\112\1\123\62\0\1\u0201"+
    "\46\0\13\12\1\0\1\12\4\0\4\12\1\u0202\11\12"+
    "\1\u0203\15\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\16\12\1\u0204\15\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\15\12"+
    "\1\u0205\16\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\1\u0206\15\12\1\u0207\15\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\4\12\1\u0208\27\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\23\12\1\u0209\10\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\12\12\1\u020a\21\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\11\12\1\u020b\22\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\15\12\1\u020c\16\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\12\12\1\u020d\21\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\1\12\1\u020e\32\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\12\12\1\u020f\21\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\1\u0210\33\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\20\12\1\u0211\13\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\12\12"+
    "\1\u0212\21\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\15\12\1\u0213\16\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\15\12"+
    "\1\u0214\16\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\12\12\1\u0215\21\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\10\12"+
    "\1\u0216\23\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\20\12\1\u0217\13\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\23\12"+
    "\1\u0218\10\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\5\12\1\u0219\26\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\12\12"+
    "\1\u021a\21\12\24\0\4\12\2\0\1\12\11\0\2\u021b"+
    "\1\u0112\1\0\5\u021b\1\0\1\u021b\4\0\1\u021b\1\u0112"+
    "\5\0\2\u021b\1\0\1\u021b\3\0\1\u021b\3\0\1\u021b"+
    "\3\0\2\u021b\30\0\4\u021b\14\0\1\u021c\1\112\1\265"+
    "\2\0\3\u021c\1\120\1\121\1\122\5\0\1\265\5\0"+
    "\1\120\1\123\1\0\1\122\13\0\2\u021c\30\0\2\u021c"+
    "\1\112\1\123\14\0\1\u021d\1\112\1\265\2\0\3\u021d"+
    "\1\120\1\121\1\122\5\0\1\265\5\0\1\120\1\123"+
    "\1\0\1\122\13\0\2\u021d\30\0\2\u021d\1\112\1\123"+
    "\61\0\1\u021e\47\0\13\12\1\0\1\12\4\0\6\12"+
    "\1\u021f\25\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\1\u0220\5\12\1\u0221\25\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\12\12\1\u0222\21\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\5\12\1\u0223\26\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\1\u0224\33\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\2\12\1\u0225\31\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\16\12"+
    "\1\u0226\15\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\6\12\1\u0227\25\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\5\12"+
    "\1\u0228\26\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\23\12\1\u0229\10\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\10\12"+
    "\1\u022a\23\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\23\12\1\u022b\10\12\24\0\4\12"+
    "\2\0\1\12\11\0\2\u022c\1\u0112\1\0\5\u022c\1\0"+
    "\1\u022c\4\0\1\u022c\1\u0112\5\0\2\u022c\1\0\1\u022c"+
    "\3\0\1\u022c\3\0\1\u022c\3\0\2\u022c\30\0\4\u022c"+
    "\14\0\1\u022d\1\112\1\265\2\0\3\u022d\1\120\1\121"+
    "\1\122\5\0\1\265\5\0\1\120\1\123\1\0\1\122"+
    "\13\0\2\u022d\30\0\2\u022d\1\112\1\123\14\0\1\u022e"+
    "\1\112\1\265\2\0\3\u022e\1\120\1\121\1\122\5\0"+
    "\1\265\5\0\1\120\1\123\1\0\1\122\13\0\2\u022e"+
    "\30\0\2\u022e\1\112\1\123\113\0\1\u022f\15\0\13\12"+
    "\1\0\1\12\4\0\12\12\1\u0230\21\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\4\12"+
    "\1\u0231\27\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\14\12\1\u0232\17\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\5\12"+
    "\1\u0233\26\12\24\0\4\12\2\0\1\12\7\0\13\12"+
    "\1\0\1\12\4\0\5\12\1\u0234\26\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\33\12"+
    "\1\u0235\24\0\4\12\2\0\1\12\7\0\13\12\1\0"+
    "\1\12\4\0\1\u0236\33\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\16\12\1\u0237\15\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\15\12\1\u0238\16\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\12\12\1\u0239\21\12"+
    "\24\0\4\12\2\0\1\12\11\0\2\u023a\1\u0112\1\0"+
    "\5\u023a\1\0\1\u023a\4\0\1\u023a\1\u0112\5\0\2\u023a"+
    "\1\0\1\u023a\3\0\1\u023a\3\0\1\u023a\3\0\2\u023a"+
    "\30\0\4\u023a\14\0\1\u023b\1\112\1\265\2\0\3\u023b"+
    "\1\120\1\121\1\122\5\0\1\265\5\0\1\120\1\123"+
    "\1\0\1\122\13\0\2\u023b\30\0\2\u023b\1\112\1\123"+
    "\14\0\1\u023c\1\112\1\265\2\0\3\u023c\1\120\1\121"+
    "\1\122\5\0\1\265\5\0\1\120\1\123\1\0\1\122"+
    "\13\0\2\u023c\30\0\2\u023c\1\112\1\123\115\0\1\u023d"+
    "\13\0\13\12\1\0\1\12\4\0\17\12\1\u023e\14\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\16\12\1\u023f\15\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\14\12\1\u0240\17\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\12\12\1\u0241\21\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\15\12\1\u0242\16\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\12\12\1\u0243\21\12\24\0\4\12\2\0\1\12"+
    "\7\0\13\12\1\0\1\12\4\0\5\12\1\u0244\26\12"+
    "\24\0\4\12\2\0\1\12\7\0\13\12\1\0\1\12"+
    "\4\0\1\u0245\33\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\15\12\1\u0246\16\12\24\0"+
    "\4\12\2\0\1\12\11\0\2\u0247\1\u0112\1\0\5\u0247"+
    "\1\0\1\u0247\4\0\1\u0247\1\u0112\5\0\2\u0247\1\0"+
    "\1\u0247\3\0\1\u0247\3\0\1\u0247\3\0\2\u0247\30\0"+
    "\4\u0247\14\0\1\u0248\1\112\1\265\2\0\3\u0248\1\120"+
    "\1\121\1\122\5\0\1\265\5\0\1\120\1\123\1\0"+
    "\1\122\13\0\2\u0248\30\0\2\u0248\1\112\1\123\14\0"+
    "\1\u0249\1\112\1\265\2\0\3\u0249\1\120\1\121\1\122"+
    "\5\0\1\265\5\0\1\120\1\123\1\0\1\122\13\0"+
    "\2\u0249\30\0\2\u0249\1\112\1\123\12\0\13\12\1\0"+
    "\1\12\4\0\16\12\1\u024a\15\12\24\0\4\12\2\0"+
    "\1\12\7\0\13\12\1\0\1\12\4\0\12\12\1\u024b"+
    "\21\12\24\0\4\12\2\0\1\12\7\0\13\12\1\0"+
    "\1\12\4\0\2\12\1\u024c\31\12\24\0\4\12\2\0"+
    "\1\12\7\0\13\12\1\0\1\12\4\0\23\12\1\u024d"+
    "\10\12\24\0\4\12\2\0\1\12\7\0\13\12\1\0"+
    "\1\12\4\0\10\12\1\u024e\23\12\24\0\4\12\2\0"+
    "\1\12\7\0\13\12\1\0\1\12\4\0\15\12\1\u024f"+
    "\16\12\24\0\4\12\2\0\1\12\7\0\13\12\1\0"+
    "\1\12\4\0\1\12\1\u0250\32\12\24\0\4\12\2\0"+
    "\1\12\7\0\13\12\1\0\1\12\4\0\11\12\1\u0251"+
    "\22\12\24\0\4\12\2\0\1\12\11\0\2\u0252\1\u0112"+
    "\1\0\5\u0252\1\0\1\u0252\4\0\1\u0252\1\u0112\5\0"+
    "\2\u0252\1\0\1\u0252\3\0\1\u0252\3\0\1\u0252\3\0"+
    "\2\u0252\30\0\4\u0252\14\0\1\u0253\1\112\1\265\2\0"+
    "\3\u0253\1\120\1\121\1\122\5\0\1\265\5\0\1\120"+
    "\1\123\1\0\1\122\13\0\2\u0253\30\0\2\u0253\1\112"+
    "\1\123\14\0\1\u0254\1\112\1\265\2\0\3\u0254\1\120"+
    "\1\121\1\122\5\0\1\265\5\0\1\120\1\123\1\0"+
    "\1\122\13\0\2\u0254\30\0\2\u0254\1\112\1\123\12\0"+
    "\13\12\1\0\1\12\4\0\12\12\1\u0255\21\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\1\12\1\u0256\32\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\15\12\1\u0257\16\12\24\0"+
    "\4\12\2\0\1\12\7\0\13\12\1\0\1\12\4\0"+
    "\15\12\1\u0258\16\12\24\0\4\12\2\0\1\12\7\0"+
    "\13\12\1\0\1\12\4\0\16\12\1\u0259\15\12\24\0"+
    "\4\12\2\0\1\12\11\0\2\u025a\1\u0112\1\0\5\u025a"+
    "\1\0\1\u025a\4\0\1\u025a\1\u0112\5\0\2\u025a\1\0"+
    "\1\u025a\3\0\1\u025a\3\0\1\u025a\3\0\2\u025a\30\0"+
    "\4\u025a\14\0\1\u025b\1\112\1\265\2\0\3\u025b\1\120"+
    "\1\121\1\122\5\0\1\265\5\0\1\120\1\123\1\0"+
    "\1\122\13\0\2\u025b\30\0\2\u025b\1\112\1\123\14\0"+
    "\1\u025c\1\112\1\265\2\0\3\u025c\1\120\1\121\1\122"+
    "\5\0\1\265\5\0\1\120\1\123\1\0\1\122\13\0"+
    "\2\u025c\30\0\2\u025c\1\112\1\123\12\0\13\12\1\0"+
    "\1\12\4\0\20\12\1\u025d\13\12\24\0\4\12\2\0"+
    "\1\12\7\0\13\12\1\0\1\12\4\0\1\u025e\33\12"+
    "\24\0\4\12\2\0\1\12\11\0\2\u025f\1\u0112\1\0"+
    "\5\u025f\1\0\1\u025f\4\0\1\u025f\1\u0112\5\0\2\u025f"+
    "\1\0\1\u025f\3\0\1\u025f\3\0\1\u025f\3\0\2\u025f"+
    "\30\0\4\u025f\14\0\1\u0260\1\112\1\265\2\0\3\u0260"+
    "\1\120\1\121\1\122\5\0\1\265\5\0\1\120\1\123"+
    "\1\0\1\122\13\0\2\u0260\30\0\2\u0260\1\112\1\123"+
    "\14\0\1\u0261\1\112\1\265\2\0\3\u0261\1\120\1\121"+
    "\1\122\5\0\1\265\5\0\1\120\1\123\1\0\1\122"+
    "\13\0\2\u0261\30\0\2\u0261\1\112\1\123\12\0\13\12"+
    "\1\0\1\12\4\0\15\12\1\u0262\16\12\24\0\4\12"+
    "\2\0\1\12\7\0\13\12\1\0\1\12\4\0\5\12"+
    "\1\u0263\26\12\24\0\4\12\2\0\1\12\11\0\2\u0264"+
    "\1\u0112\1\0\5\u0264\1\0\1\u0264\4\0\1\u0264\1\u0112"+
    "\5\0\2\u0264\1\0\1\u0264\3\0\1\u0264\3\0\1\u0264"+
    "\3\0\2\u0264\30\0\4\u0264\14\0\1\u0265\1\112\1\265"+
    "\2\0\3\u0265\1\120\1\121\1\122\5\0\1\265\5\0"+
    "\1\120\1\123\1\0\1\122\13\0\2\u0265\30\0\2\u0265"+
    "\1\112\1\123\14\0\1\u0266\1\112\1\265\2\0\3\u0266"+
    "\1\120\1\121\1\122\5\0\1\265\5\0\1\120\1\123"+
    "\1\0\1\122\13\0\2\u0266\30\0\2\u0266\1\112\1\123"+
    "\12\0\13\12\1\0\1\12\4\0\15\12\1\u0267\16\12"+
    "\24\0\4\12\2\0\1\12\11\0\2\u0268\1\u0112\1\0"+
    "\5\u0268\1\0\1\u0268\4\0\1\u0268\1\u0112\5\0\2\u0268"+
    "\1\0\1\u0268\3\0\1\u0268\3\0\1\u0268\3\0\2\u0268"+
    "\30\0\4\u0268\14\0\1\u0269\1\112\1\265\2\0\3\u0269"+
    "\1\120\1\121\1\122\5\0\1\265\5\0\1\120\1\123"+
    "\1\0\1\122\13\0\2\u0269\30\0\2\u0269\1\112\1\123"+
    "\14\0\1\u026a\1\112\1\265\2\0\3\u026a\1\120\1\121"+
    "\1\122\5\0\1\265\5\0\1\120\1\123\1\0\1\122"+
    "\13\0\2\u026a\30\0\2\u026a\1\112\1\123\14\0\2\u026b"+
    "\1\u0112\1\0\5\u026b\1\0\1\u026b\4\0\1\u026b\1\u0112"+
    "\5\0\2\u026b\1\0\1\u026b\3\0\1\u026b\3\0\1\u026b"+
    "\3\0\2\u026b\30\0\4\u026b\14\0\1\u026c\1\112\1\265"+
    "\2\0\3\u026c\1\120\1\121\1\122\5\0\1\265\5\0"+
    "\1\120\1\123\1\0\1\122\13\0\2\u026c\30\0\2\u026c"+
    "\1\112\1\123\16\0\1\u0112\15\0\1\u0112\76\0\1\u026d"+
    "\1\112\1\265\2\0\3\u026d\1\120\1\121\1\122\5\0"+
    "\1\265\5\0\1\120\1\123\1\0\1\122\13\0\2\u026d"+
    "\30\0\2\u026d\1\112\1\123\14\0\1\u026e\1\112\1\265"+
    "\2\0\3\u026e\1\120\1\121\1\122\5\0\1\265\5\0"+
    "\1\120\1\123\1\0\1\122\13\0\2\u026e\30\0\2\u026e"+
    "\1\112\1\123\14\0\1\u026f\1\112\1\265\2\0\3\u026f"+
    "\1\120\1\121\1\122\5\0\1\265\5\0\1\120\1\123"+
    "\1\0\1\122\13\0\2\u026f\30\0\2\u026f\1\112\1\123"+
    "\14\0\1\u0270\1\112\1\265\2\0\3\u0270\1\120\1\121"+
    "\1\122\5\0\1\265\5\0\1\120\1\123\1\0\1\122"+
    "\13\0\2\u0270\30\0\2\u0270\1\112\1\123\14\0\2\112"+
    "\1\265\2\0\3\112\1\120\1\121\1\122\5\0\1\265"+
    "\5\0\1\120\1\123\1\0\1\122\13\0\2\112\30\0"+
    "\3\112\1\123\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[37288];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\10\1\2\11\24\1\10\11"+
    "\4\1\3\11\7\1\2\11\3\1\1\11\1\1\1\0"+
    "\1\1\1\0\2\11\1\1\1\11\2\1\1\11\1\0"+
    "\3\1\1\11\1\1\1\0\1\11\1\0\3\11\66\1"+
    "\2\11\1\1\1\11\1\1\12\11\2\1\11\11\13\1"+
    "\1\11\1\0\1\11\5\1\2\0\106\1\1\11\1\1"+
    "\2\11\1\0\1\11\1\0\11\11\3\1\1\0\106\1"+
    "\1\11\3\1\1\0\102\1\1\0\67\1\1\0\44\1"+
    "\1\0\34\1\1\0\20\1\1\0\12\1\1\0\2\1"+
    "\1\11\11\1\1\0\12\1\1\0\7\1\1\0\4\1"+
    "\1\0\4\1\1\0\3\1\1\0\2\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[624];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();
  
  private Token symbol(TokenTypes type) {
    return new Token(type, yyline+1, yycolumn+1);
  }

  private Token symbol(TokenTypes type, Object value) {
    return new Token(type, yyline+1, yycolumn+1, value);
  }

  /** 
   * assumes correct representation of a long value for 
   * specified radix in scanner buffer from <code>start</code> 
   * to <code>end</code> 
   */
  private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CppScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2894) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return symbol(TokenTypes.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn); */
            }
          case 171: break;
          case 2: 
            { /* ignore */
            }
          case 172: break;
          case 3: 
            { return symbol(TokenTypes.DIV);
            }
          case 173: break;
          case 4: 
            { return symbol(TokenTypes.MULT);
            }
          case 174: break;
          case 5: 
            { return symbol(TokenTypes.PREPROCESSOR);
            }
          case 175: break;
          case 6: 
            { return symbol(TokenTypes.IDENTIFIER, yytext());
            }
          case 176: break;
          case 7: 
            { return symbol(TokenTypes.INTEGER_LITERAL, new Integer(yytext()));
            }
          case 177: break;
          case 8: 
            { return symbol(TokenTypes.DOT);
            }
          case 178: break;
          case 9: 
            { return symbol(TokenTypes.MINUS);
            }
          case 179: break;
          case 10: 
            { yybegin(STRING); string.setLength(0);
            }
          case 180: break;
          case 11: 
            { yybegin(CHARLITERAL);
            }
          case 181: break;
          case 12: 
            { return symbol(TokenTypes.LPAREN);
            }
          case 182: break;
          case 13: 
            { return symbol(TokenTypes.RPAREN);
            }
          case 183: break;
          case 14: 
            { return symbol(TokenTypes.LBRACE);
            }
          case 184: break;
          case 15: 
            { return symbol(TokenTypes.RBRACE);
            }
          case 185: break;
          case 16: 
            { return symbol(TokenTypes.LBRACK);
            }
          case 186: break;
          case 17: 
            { return symbol(TokenTypes.RBRACK);
            }
          case 187: break;
          case 18: 
            { return symbol(TokenTypes.SEMICOLON);
            }
          case 188: break;
          case 19: 
            { return symbol(TokenTypes.COMMA);
            }
          case 189: break;
          case 20: 
            { return symbol(TokenTypes.EQ);
            }
          case 190: break;
          case 21: 
            { return symbol(TokenTypes.GT);
            }
          case 191: break;
          case 22: 
            { return symbol(TokenTypes.LT);
            }
          case 192: break;
          case 23: 
            { return symbol(TokenTypes.NOT);
            }
          case 193: break;
          case 24: 
            { return symbol(TokenTypes.COMP);
            }
          case 194: break;
          case 25: 
            { return symbol(TokenTypes.QUESTION);
            }
          case 195: break;
          case 26: 
            { return symbol(TokenTypes.COLON);
            }
          case 196: break;
          case 27: 
            { return symbol(TokenTypes.AND);
            }
          case 197: break;
          case 28: 
            { return symbol(TokenTypes.OR);
            }
          case 198: break;
          case 29: 
            { return symbol(TokenTypes.PLUS);
            }
          case 199: break;
          case 30: 
            { return symbol(TokenTypes.XOR);
            }
          case 200: break;
          case 31: 
            { return symbol(TokenTypes.MOD);
            }
          case 201: break;
          case 32: 
            { string.append( yytext() );
            }
          case 202: break;
          case 33: 
            { /* throw new RuntimeException("Unterminated string at end of line"); */
            }
          case 203: break;
          case 34: 
            { yybegin(YYINITIAL); return symbol(TokenTypes.STRING_LITERAL, string.toString());
            }
          case 204: break;
          case 35: 
            { /* throw new RuntimeException("Unterminated character literal at end of line"); */
            }
          case 205: break;
          case 36: 
            { return symbol(TokenTypes.COMMENT);
            }
          case 206: break;
          case 37: 
            { return symbol(TokenTypes.DIVEQ);
            }
          case 207: break;
          case 38: 
            { return symbol(TokenTypes.MULTEQ);
            }
          case 208: break;
          case 39: 
            { return symbol(TokenTypes.INTEGER_LITERAL, new Integer((int) parseLong(0, yylength(), 8)));
            }
          case 209: break;
          case 40: 
            { return symbol(TokenTypes.FLOATING_POINT_LITERAL, new Double(yytext()));
            }
          case 210: break;
          case 41: 
            { return symbol(TokenTypes.INTEGER_LITERAL, new Long(yytext().substring(0,yylength()-1)));
            }
          case 211: break;
          case 42: 
            { return symbol(TokenTypes.FLOATING_POINT_LITERAL, new Float(yytext().substring(0,yylength()-1)));
            }
          case 212: break;
          case 43: 
            { return symbol(TokenTypes.FLOATING_POINT_LITERAL, new Double(yytext().substring(0,yylength()-1)));
            }
          case 213: break;
          case 44: 
            { return symbol(TokenTypes.MINUSMINUS);
            }
          case 214: break;
          case 45: 
            { return symbol(TokenTypes.MINUSEQ);
            }
          case 215: break;
          case 46: 
            { return symbol(TokenTypes.MEMBERACCESS);
            }
          case 216: break;
          case 47: 
            { return symbol(TokenTypes.IF);
            }
          case 217: break;
          case 48: 
            { return symbol(TokenTypes.OROR);
            }
          case 218: break;
          case 49: 
            { return symbol(TokenTypes.DO);
            }
          case 219: break;
          case 50: 
            { return symbol(TokenTypes.EQEQ);
            }
          case 220: break;
          case 51: 
            { return symbol(TokenTypes.GTEQ);
            }
          case 221: break;
          case 52: 
            { return symbol(TokenTypes.RSHIFT);
            }
          case 222: break;
          case 53: 
            { return symbol(TokenTypes.LTEQ);
            }
          case 223: break;
          case 54: 
            { return symbol(TokenTypes.LSHIFT);
            }
          case 224: break;
          case 55: 
            { return symbol(TokenTypes.NOTEQ);
            }
          case 225: break;
          case 56: 
            { return symbol(TokenTypes.ANDEQ);
            }
          case 226: break;
          case 57: 
            { return symbol(TokenTypes.ANDAND);
            }
          case 227: break;
          case 58: 
            { return symbol(TokenTypes.OREQ);
            }
          case 228: break;
          case 59: 
            { return symbol(TokenTypes.PLUSEQ);
            }
          case 229: break;
          case 60: 
            { return symbol(TokenTypes.PLUSPLUS);
            }
          case 230: break;
          case 61: 
            { return symbol(TokenTypes.XOREQ);
            }
          case 231: break;
          case 62: 
            { return symbol(TokenTypes.MODEQ);
            }
          case 232: break;
          case 63: 
            { /* throw new RuntimeException("Illegal escape sequence \""+yytext()+"\""); */
            }
          case 233: break;
          case 64: 
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );
            }
          case 234: break;
          case 65: 
            { string.append( '\"' );
            }
          case 235: break;
          case 66: 
            { string.append( '\'' );
            }
          case 236: break;
          case 67: 
            { string.append( '\\' );
            }
          case 237: break;
          case 68: 
            { string.append( '\n' );
            }
          case 238: break;
          case 69: 
            { string.append( '\f' );
            }
          case 239: break;
          case 70: 
            { string.append( '\t' );
            }
          case 240: break;
          case 71: 
            { string.append( '\b' );
            }
          case 241: break;
          case 72: 
            { string.append( '\r' );
            }
          case 242: break;
          case 73: 
            { yybegin(YYINITIAL); return symbol(TokenTypes.CHARACTER_LITERAL, yytext().charAt(0));
            }
          case 243: break;
          case 74: 
            { return symbol(TokenTypes.INTEGER_LITERAL, new Long(parseLong(0, yylength()-1, 8)));
            }
          case 244: break;
          case 75: 
            { return symbol(TokenTypes.INTEGER_LITERAL, new Integer((int) parseLong(2, yylength(), 16)));
            }
          case 245: break;
          case 76: 
            { return symbol(TokenTypes.ASM);
            }
          case 246: break;
          case 77: 
            { return symbol(TokenTypes.INT);
            }
          case 247: break;
          case 78: 
            { return symbol(TokenTypes.NEW);
            }
          case 248: break;
          case 79: 
            { return symbol(TokenTypes.FOR);
            }
          case 249: break;
          case 80: 
            { return symbol(TokenTypes.TRY);
            }
          case 250: break;
          case 81: 
            { return symbol(TokenTypes.RSHIFTEQ);
            }
          case 251: break;
          case 82: 
            { return symbol(TokenTypes.URSHIFT);
            }
          case 252: break;
          case 83: 
            { return symbol(TokenTypes.LSHIFTEQ);
            }
          case 253: break;
          case 84: 
            { yybegin(YYINITIAL); 
			                              int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
			                            return symbol(TokenTypes.CHARACTER_LITERAL, (char)val);
            }
          case 254: break;
          case 85: 
            { yybegin(YYINITIAL); return symbol(TokenTypes.CHARACTER_LITERAL, '\"');
            }
          case 255: break;
          case 86: 
            { yybegin(YYINITIAL); return symbol(TokenTypes.CHARACTER_LITERAL, '\'');
            }
          case 256: break;
          case 87: 
            { yybegin(YYINITIAL); return symbol(TokenTypes.CHARACTER_LITERAL, '\\');
            }
          case 257: break;
          case 88: 
            { yybegin(YYINITIAL); return symbol(TokenTypes.CHARACTER_LITERAL, '\n');
            }
          case 258: break;
          case 89: 
            { yybegin(YYINITIAL); return symbol(TokenTypes.CHARACTER_LITERAL, '\f');
            }
          case 259: break;
          case 90: 
            { yybegin(YYINITIAL); return symbol(TokenTypes.CHARACTER_LITERAL, '\t');
            }
          case 260: break;
          case 91: 
            { yybegin(YYINITIAL); return symbol(TokenTypes.CHARACTER_LITERAL, '\b');
            }
          case 261: break;
          case 92: 
            { yybegin(YYINITIAL); return symbol(TokenTypes.CHARACTER_LITERAL, '\r');
            }
          case 262: break;
          case 93: 
            { return symbol(TokenTypes.INTEGER_LITERAL, new Long(parseLong(2, yylength()-1, 16)));
            }
          case 263: break;
          case 94: 
            { return symbol(TokenTypes.AUTO);
            }
          case 264: break;
          case 95: 
            { return symbol(TokenTypes.LONG);
            }
          case 265: break;
          case 96: 
            { return symbol(TokenTypes.GOTO);
            }
          case 266: break;
          case 97: 
            { return symbol(TokenTypes.NULL_LITERAL);
            }
          case 267: break;
          case 98: 
            { return symbol(TokenTypes.ELSE);
            }
          case 268: break;
          case 99: 
            { return symbol(TokenTypes.ENUM);
            }
          case 269: break;
          case 100: 
            { return symbol(TokenTypes.BOOLEAN_LITERAL, true);
            }
          case 270: break;
          case 101: 
            { return symbol(TokenTypes.THIS);
            }
          case 271: break;
          case 102: 
            { return symbol(TokenTypes.CASE);
            }
          case 272: break;
          case 103: 
            { return symbol(TokenTypes.CHAR);
            }
          case 273: break;
          case 104: 
            { return symbol(TokenTypes.BOOLEAN);
            }
          case 274: break;
          case 105: 
            { return symbol(TokenTypes.VOID);
            }
          case 275: break;
          case 106: 
            { return symbol(TokenTypes.URSHIFTEQ);
            }
          case 276: break;
          case 107: 
            { return symbol(TokenTypes.SHORT);
            }
          case 277: break;
          case 108: 
            { return symbol(TokenTypes.BOOLEAN_LITERAL, false);
            }
          case 278: break;
          case 109: 
            { return symbol(TokenTypes.FLOAT);
            }
          case 279: break;
          case 110: 
            { return symbol(TokenTypes.THROW);
            }
          case 280: break;
          case 111: 
            { return symbol(TokenTypes.CATCH);
            }
          case 281: break;
          case 112: 
            { return symbol(TokenTypes.CLASS);
            }
          case 282: break;
          case 113: 
            { return symbol(TokenTypes.CONST);
            }
          case 283: break;
          case 114: 
            { return symbol(TokenTypes.COMPL);
            }
          case 284: break;
          case 115: 
            { return symbol(TokenTypes.UNION);
            }
          case 285: break;
          case 116: 
            { return symbol(TokenTypes.USING);
            }
          case 286: break;
          case 117: 
            { return symbol(TokenTypes.BREAK);
            }
          case 287: break;
          case 118: 
            { return symbol(TokenTypes.WHILE);
            }
          case 288: break;
          case 119: 
            { return symbol(TokenTypes.INLINE);
            }
          case 289: break;
          case 120: 
            { return symbol(TokenTypes.IMPORT);
            }
          case 290: break;
          case 121: 
            { return symbol(TokenTypes.SIGNED);
            }
          case 291: break;
          case 122: 
            { return symbol(TokenTypes.SIZEOF);
            }
          case 292: break;
          case 123: 
            { return symbol(TokenTypes.STATIC);
            }
          case 293: break;
          case 124: 
            { return symbol(TokenTypes.STRUCT);
            }
          case 294: break;
          case 125: 
            { return symbol(TokenTypes.SWITCH);
            }
          case 295: break;
          case 126: 
            { return symbol(TokenTypes.FRIEND);
            }
          case 296: break;
          case 127: 
            { return symbol(TokenTypes.DOUBLE);
            }
          case 297: break;
          case 128: 
            { return symbol(TokenTypes.DELETE);
            }
          case 298: break;
          case 129: 
            { return symbol(TokenTypes.EXTERN);
            }
          case 299: break;
          case 130: 
            { return symbol(TokenTypes.EXPORT);
            }
          case 300: break;
          case 131: 
            { return symbol(TokenTypes.MODULE);
            }
          case 301: break;
          case 132: 
            { return symbol(TokenTypes.TYPEID);
            }
          case 302: break;
          case 133: 
            { return symbol(TokenTypes.PUBLIC);
            }
          case 303: break;
          case 134: 
            { return symbol(TokenTypes.RETURN);
            }
          case 304: break;
          case 135: 
            { return symbol(TokenTypes.ALIGNAS);
            }
          case 305: break;
          case 136: 
            { return symbol(TokenTypes.ALIGNOF);
            }
          case 306: break;
          case 137: 
            { return symbol(TokenTypes.DEFAULT);
            }
          case 307: break;
          case 138: 
            { return symbol(TokenTypes.MUTABLE);
            }
          case 308: break;
          case 139: 
            { return symbol(TokenTypes.TYPEDEF);
            }
          case 309: break;
          case 140: 
            { return symbol(TokenTypes.CONCEPT);
            }
          case 310: break;
          case 141: 
            { return symbol(TokenTypes.PRIVATE);
            }
          case 311: break;
          case 142: 
            { return symbol(TokenTypes.WCHART);
            }
          case 312: break;
          case 143: 
            { return symbol(TokenTypes.VIRTUAL);
            }
          case 313: break;
          case 144: 
            { return symbol(TokenTypes.NOEXCEPT);
            }
          case 314: break;
          case 145: 
            { return symbol(TokenTypes.OPERATOR);
            }
          case 315: break;
          case 146: 
            { return symbol(TokenTypes.DECLTYPE);
            }
          case 316: break;
          case 147: 
            { return symbol(TokenTypes.EXPLICIT);
            }
          case 317: break;
          case 148: 
            { return symbol(TokenTypes.TEMPLATE);
            }
          case 318: break;
          case 149: 
            { return symbol(TokenTypes.TYPENAME);
            }
          case 319: break;
          case 150: 
            { return symbol(TokenTypes.CONTINUE);
            }
          case 320: break;
          case 151: 
            { return symbol(TokenTypes.CHAR16T);
            }
          case 321: break;
          case 152: 
            { return symbol(TokenTypes.CHAR32T);
            }
          case 322: break;
          case 153: 
            { return symbol(TokenTypes.UNSIGNED);
            }
          case 323: break;
          case 154: 
            { return symbol(TokenTypes.REGISTER);
            }
          case 324: break;
          case 155: 
            { return symbol(TokenTypes.REQUIRES);
            }
          case 325: break;
          case 156: 
            { return symbol(TokenTypes.VOLATILE);
            }
          case 326: break;
          case 157: 
            { return symbol(TokenTypes.NAMESPACE);
            }
          case 327: break;
          case 158: 
            { return symbol(TokenTypes.CONSTEXPR);
            }
          case 328: break;
          case 159: 
            { return symbol(TokenTypes.PROTECTED);
            }
          case 329: break;
          case 160: 
            { return symbol(TokenTypes.CONSTCAST);
            }
          case 330: break;
          case 161: 
            { return symbol(TokenTypes.INTEGER_LITERAL, new Integer(Integer.MIN_VALUE));
            }
          case 331: break;
          case 162: 
            { return symbol(TokenTypes.STATIC_CAST);
            }
          case 332: break;
          case 163: 
            { return symbol(TokenTypes.SYNCHRONIZED);
            }
          case 333: break;
          case 164: 
            { return symbol(TokenTypes.DYNAMIC_CAST);
            }
          case 334: break;
          case 165: 
            { return symbol(TokenTypes.THREAD_LOCAL);
            }
          case 335: break;
          case 166: 
            { return symbol(TokenTypes.ATOMIC_CANCEL);
            }
          case 336: break;
          case 167: 
            { return symbol(TokenTypes.ATOMIC_COMMIT);
            }
          case 337: break;
          case 168: 
            { return symbol(TokenTypes.STATIC_ASSERT);
            }
          case 338: break;
          case 169: 
            { return symbol(TokenTypes.ATOMIC_NOEXCEPT);
            }
          case 339: break;
          case 170: 
            { return symbol(TokenTypes.REINTERPRET_CAST);
            }
          case 340: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
